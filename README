Tiny Web server with Range support

This is the home directory for the Tiny server, a web server used in 
the textbook CSAPP3e. Tiny uses the GET method to serve static content
(text, HTML, GIF, JPG, mp3, mp4 files) out of ./ (working directory)
and to serve dynamic content by running CGI programs out of ./cgi-bin.
The default page is home.html (rather than index.html) so that we can
view the contents of the directory from a browser.

Tiny is neither secure nor complete, but it gives students an idea of
how a real Web Server works. Use for instructional purposes only.

The compiles and runs cleanly on W204 machines or Vagrant that has Centos6.10
instsalled, running Linux kernel 2.6.32 and gcc version 4.4.7.

To compile Tiny:
  Type "make"

To run Tiny:
  Type "tiny <port>" on the server machine,
    e.g. "tiny 8080".
  Point your browser at Tiny:
    static content: http://<host>:8080
    dynamic content: http://<host>:8080/cgi-bin/adder?1&2

For debugging purposes, you should consider using command line browser curl.
It has options (-v for verbose) where it will print out debugging
info about the connections it makes to the server, the request headers it
sends to the server and the response headers it receives from the webserver. 
  curl -v http://<host>:8080


Files:
  csapp.c               Provide Rio package and other supporting functions
  csapp.h               csapp supporting functions' declarations
  tiny.c		The Tiny server
  Makefile		Makefile for tiny.c
  home.html		Test HTML page
  godzilla.gif		Image embedded in home.html
  godzilla.jpg          jpg image
  shaun.mp4             mp4 video file
  sample.mp3            mp3 music file
  range.txt             a text file for testing range support
  port-for-user.pl      "./port-for-user.pl userid" will give you an even port 
                        number p that won't easily collide with other students,
			you can use port p and p+1 for your experiment on W204.
  free-port.sh          "./free-port.sh" will give you an unused port number.
  README		This file	
  cgi-bin/adder.c	CGI program that adds two numbers
  cgi-bin/Makefile	Makefile for adder.c

Supporting range request can make network communication more efficient when transferringlarge files. The browser can resume getting part of a large file if previous transmission onlypartially succeeded. For large media files, range request must be supported to make it possibleto select random position to play. In particular, Safari web browser will not play any large mediafile at all if range request is not supported.

Your task for this assignment is to produce the right response based on the value of rangeNode struct's value. If there was no valid range request, your tiny web server should return the same response and file content as before, but if there is a valid range request, then your tiny web server's response has to accommodate the range requests. This includes the following changes you will have to make to your response.

Understand ranges: 
	There are three type of ranges a browser can request:
	1. bytes=r1-r2   (r1, r2 are both non negative, they are the byte position of first bytes and last bytes we retrieve from the file. A file's byte position start from 0 and last byte is atposition filesize-1.)
	2. bytes=r1-    (similar to first case but missing r2, server needs to assume r2 is the last byte of the file.)
	3. bytes=-r1 (the last r1 bytes of the file, so for a file of size 100, -10 means range 90-99)
	
Response status:
	● Non range request has response status line as below:
		○ HTTP/1.1 200 OK
	● A valid range request should have the status line as this:
		○ HTTP/1.1 206 Partial Content
	● An invalid range request, where the range doesn't include any valid byte of the requested file, should have the status line as this:
		○ HTTP/1.1 416 Range Not Satisfiable
		
Response headers for range request:
	● Content-Range
		○ example of valid range request: ranges, file size are included in this header.
			■ Content-Range: bytes 111-120/121
		○ example of invalid range request: *(for ranges) and file size are included in thisheader.
			■ Content-Range: bytes */121
	● Content-length (for valid ranges, the range is inclusive, so for 111-120 is 10 bytes)
		○ Content-length: 10
	● Accept-Ranges: bytes
		○ should always be included to acknowledge the browser that we support rangerequest with units being bytes
		
The file content that we sent back should only be the bytes corresponding to the valid range, not the whole file. 
